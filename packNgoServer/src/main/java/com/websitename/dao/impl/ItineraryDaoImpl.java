package com.websitename.dao.impl;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.websitename.dao.ItineraryDao;
import com.websitename.entities.Itinerary;
import com.websitename.utils.Utils;


/**
 * DAO for table: Itinerary.
 * @author autogenerated
 */
@Repository
public class ItineraryDaoImpl extends GenericHibernateDaoImpl<Itinerary, String> implements ItineraryDao {

	/** Constructor method. */
	public ItineraryDaoImpl() {
		super(Itinerary.class);
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
	public List<Itinerary> getItineraryForDate(String planId, String formatDate) throws Exception {
		try {
			Criteria crit = getSession().createCriteria(getPersistentClass());

			if(planId!=null){
				crit.add(Restrictions.eq("plan.id",planId));
			}
			if(!Utils.isNullOrBlank(formatDate)){
				crit.add(Restrictions.eq("date", formatDate));
			}

			return crit.list();
			
		} catch (HibernateException e) {
			throw e;
		}	

	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
	public List<Itinerary> getByCriteria(Itinerary itinerary) throws Exception {
		try {
			Criteria crit = getSession().createCriteria(getPersistentClass());

			if(itinerary.getPlan()!=null){
				crit.add(Restrictions.eq("plan",itinerary.getPlan()));
			}
			if(itinerary.getLocation()!=null){
				crit.add(Restrictions.eq("location.id",itinerary.getLocation().getId()));
			}
			if(!Utils.isNullOrBlank(itinerary.getDate())){
				crit.add(Restrictions.eq("date",itinerary.getDate()));
			}
			return crit.list();
			
		} catch (HibernateException e) {
			throw e;
		}	
	}
}

