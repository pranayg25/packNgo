package com.websitename.dao.impl;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.websitename.dao.UserDao;
import com.websitename.entities.User;
import com.websitename.utils.Utils;


/**
 * DAO for table: User.
 * @author autogenerated
 */
@Repository
public class UserDaoImpl extends GenericHibernateDaoImpl<User, String> implements UserDao {

	/** Constructor method. */
	public UserDaoImpl() {
		super(User.class);
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
	public User authenticateUser(User user) throws Exception{
		try {
			Criteria crit = getSession().createCriteria(getPersistentClass());

			if(!Utils.isNullOrBlank(user.getPassword())){
				crit.add(Restrictions.eq("password", user.getPassword()));
			}
			if(!Utils.isNullOrBlank(user.getEmail())){
				crit.add(Restrictions.eq("email", user.getEmail()));
			}

			user = (User) crit.uniqueResult();

			return user;

		} catch (HibernateException e) {
			throw e;
		}	

	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
	public User findFriend(User user,String email) throws Exception{
		try {
			Criteria crit = getSession().createCriteria(getPersistentClass());
			//crit.createAlias("friends", "frnd");
			crit.add(Restrictions.eq("email", email));
			crit.add(Restrictions.ne("email", user.getEmail()));
			//crit.add(Restrictions.not(Restrictions.in("frnd.friendUser",user.getFriends())));
			user = (User) crit.uniqueResult();

			return user;

		} catch (HibernateException e) {
			throw e;
		}	

	}

}

