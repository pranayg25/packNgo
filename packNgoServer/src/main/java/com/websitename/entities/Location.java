package com.websitename.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.websitename.entities.iface.ILocation;


/** 
 * Object mapping for hibernate-handled table: location.
 * @author autogenerated
 */

@Entity
@Table(name = "location", catalog = "websitename")
public class Location implements Cloneable, Serializable, ILocation {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558970238L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	
	/** Field mapping. */
	private String placeId;
	/** Field mapping. */
	private String details;
	/** Field mapping. */
	private Double duration;
	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private String image;
	/** Field mapping. */
	private Set<Itinerary> itineraries = new HashSet<Itinerary>();

	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private String time;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Location() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Location(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param details String object;
	 * @param duration String object;
	 * @param id String object;
	 * @param image String object;
	 * @param name String object;
	 * @param time String object;
	 */
	public Location(String details, Double duration, String id, 					
			String image, String name, String time) {

		this.details = details;
		this.duration = duration;
		this.id = id;
		this.image = image;
		this.name = name;
		this.time = time;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Location.class;
	}
 

    /**
     * Return the value associated with the column: details.
	 * @return A String object (this.details)
	 */
	@Column( nullable = true, length = 21845  )
	public String getDetails() {
		return this.details;
		
	}
	

  
    /**  
     * Set the value related to the column: details.
	 * @param details the details value you wish to set
	 */
	public void setDetails(final String details) {
		this.details = details;
	}

    /**
     * Return the value associated with the column: duration.
	 * @return A String object (this.duration)
	 */
	@Column( nullable = true )
	public Double getDuration() {
		return this.duration;
	}
	

  
    /**  
     * Set the value related to the column: duration.
	 * @param duration the duration value you wish to set
	 */
	public void setDuration(final Double duration) {
		this.duration = duration;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Column( name = "id", nullable = false, length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: image.
	 * @return A String object (this.image)
	 */
	@Column( nullable = true, length = 21845  )
	public String getImage() {
		return this.image;
		
	}
	

  
    /**  
     * Set the value related to the column: image.
	 * @param image the image value you wish to set
	 */
	public void setImage(final String image) {
		this.image = image;
	}

    /**
     * Return the value associated with the column: itinerary.
	 * @return A Set&lt;Itinerary&gt; object (this.itinerary)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "location"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Column( nullable = false  )
	public Set<Itinerary> getItineraries() {
		return this.itineraries;
		
	}
	
	/**
	 * Adds a bi-directional link of type Itinerary to the itineraries set.
	 * @param itinerary item to add
	 */
	public void addItinerary(Itinerary itinerary) {
		itinerary.setLocation(this);
		this.itineraries.add(itinerary);
	}

  
    /**  
     * Set the value related to the column: itinerary.
	 * @param itinerary the itinerary value you wish to set
	 */
	public void setItineraries(final Set<Itinerary> itinerary) {
		this.itineraries = itinerary;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Column( nullable = false  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: time.
	 * @return A String object (this.time)
	 */
	@Column( nullable = true, length = 20  )
	public String getTime() {
		return this.time;
		
	}
	

  
    /**  
     * Set the value related to the column: time.
	 * @param time the time value you wish to set
	 */
	public void setTime(final String time) {
		this.time = time;
	}

    /**
     * Return the value associated with the column: placeId.
	 * @return A String object (this.placeId)
	 */
	@Column( name = "place_id", length = 50  )
	public String getPlaceId() {
		return this.placeId;
		
	}
	

  
    /**  
     * Set the value related to the column: placeId.
	 * @param placeId the placeId value you wish to set
	 */
	public void setPlaceId(final String placeId) {
		this.placeId = placeId;
	}

   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Location clone() throws CloneNotSupportedException {
		
        final Location copy = (Location)super.clone();

		copy.setDetails(this.getDetails());
		copy.setDuration(this.getDuration());
		copy.setId(this.getId());
		copy.setImage(this.getImage());
		if (this.getItineraries() != null) {
			copy.getItineraries().addAll(this.getItineraries());
		}
		copy.setName(this.getName());
		copy.setTime(this.getTime());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("details: " + this.getDetails() + ", ");
		sb.append("duration: " + this.getDuration() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("image: " + this.getImage() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("time: " + this.getTime());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Location that; 
		try {
			that = (Location) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDetails() == null) && (that.getDetails() == null)) || (getDetails() != null && getDetails().equals(that.getDetails())));
		result = result && (((getDuration() == null) && (that.getDuration() == null)) || (getDuration() != null && getDuration().equals(that.getDuration())));
		result = result && (((getImage() == null) && (that.getImage() == null)) || (getImage() != null && getImage().equals(that.getImage())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getTime() == null) && (that.getTime() == null)) || (getTime() != null && getTime().equals(that.getTime())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
