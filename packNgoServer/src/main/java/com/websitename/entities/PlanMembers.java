package com.websitename.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.websitename.entities.iface.IPlanMembers;


/** 
 * Object mapping for hibernate-handled table: plan_members.
 * @author autogenerated
 */

@Entity
@Table(name = "plan_members", catalog = "websitename")
public class PlanMembers implements Cloneable, Serializable, IPlanMembers {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558970236L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private Plan plan;
	/** Field mapping. */
	private User user;
	/** Field mapping. */
	private Boolean iscreator;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public PlanMembers() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public PlanMembers(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id String object;
	 * @param plan Plan object;
	 * @param user User object;
	 */
	public PlanMembers(String id, Plan plan, User user) {

		this.id = id;
		this.plan = plan;
		this.user = user;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return PlanMembers.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Column( name = "id", nullable = false, length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: plan.
	 * @return A Plan object (this.plan)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "plan_id", nullable = false )
	public Plan getPlan() {
		return this.plan;
		
	}
	

  
    /**  
     * Set the value related to the column: plan.
	 * @param plan the plan value you wish to set
	 */
	public void setPlan(final Plan plan) {
		this.plan = plan;
	}

    /**
     * Return the value associated with the column: user.
	 * @return A User object (this.user)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "user_id", nullable = false )
	public User getUser() {
		return this.user;
		
	}
	

  
    /**  
     * Set the value related to the column: user.
	 * @param user the user value you wish to set
	 */
	public void setUser(final User user) {
		this.user = user;
	}
	
    /**
     * Return the value associated with the column: iscreator.
	 * @return A Boolean object (this.iscreator)
	 */
	public Boolean isIscreator() {
		return this.iscreator;
		
	}
	

  
    /**  
     * Set the value related to the column: iscreator.
	 * @param iscreator the iscreator value you wish to set
	 */
	public void setIscreator(final Boolean iscreator) {
		this.iscreator = iscreator;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public PlanMembers clone() throws CloneNotSupportedException {
		
        final PlanMembers copy = (PlanMembers)super.clone();

		copy.setId(this.getId());
		copy.setPlan(this.getPlan());
		copy.setUser(this.getUser());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final PlanMembers that; 
		try {
			that = (PlanMembers) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getPlan() == null) && (that.getPlan() == null)) || (getPlan() != null && getPlan().getId().equals(that.getPlan().getId())));	
		result = result && (((getUser() == null) && (that.getUser() == null)) || (getUser() != null && getUser().getId().equals(that.getUser().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
