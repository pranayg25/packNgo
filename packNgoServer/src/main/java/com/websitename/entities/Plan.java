package com.websitename.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.websitename.entities.iface.IPlan;


/** 
 * Object mapping for hibernate-handled table: plan.
 * @author autogenerated
 */

@Entity
@Table(name = "plan", catalog = "websitename")
public class Plan implements Cloneable, Serializable, IPlan {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558970237L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
			Collections.synchronizedMap(new WeakHashMap<Serializable, String>());

	/** hashCode temporary storage. */
	private volatile String hashCode;

	/** Field mapping. */
	private Integer hours;
	/** Field mapping. */
	private Double latitude;
	/** Field mapping. */
	private Double longitude;
	/** Field mapping. */
	//private String dayEnd;
	/** Field mapping. */
	//private String dayStart;
	/** Field mapping. */
	private String endDate;
	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private Set<Itinerary> itineraries = new HashSet<Itinerary>();

	/** Field mapping. */
	private String location;
	/** Field mapping. */
	private Set<PlanMembers> planMemberss = new HashSet<PlanMembers>();

	/** Field mapping. */
	private String startDate;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Plan() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Plan(String id) {
		this.id = id;
	}

	/** Constructor taking a given ID.
	 * @param dayEnd String object;
	 * @param dayStart String object;
	 * @param endDate Date object;
	 * @param id String object;
	 * @param location String object;
	 * @param startDate Date object;
	 */
	public Plan( String endDate, 					
			String id, String location, String startDate) {

		//this.dayEnd = dayEnd;
		//this.dayStart = dayStart;
		this.endDate = endDate;
		this.id = id;
		this.location = location;
		this.startDate = startDate;
	}





	/** Return the type of this class. Useful for when dealing with proxies.
	 * @return Defining class.
	 */
	@Transient
	public Class<?> getClassType() {
		return Plan.class;
	}

    /**
     * Return the value associated with the column: hours.
	 * @return A Integer object (this.hours)
	 */
	public Integer getHours() {
		return this.hours;
		
	}
	

  
    /**  
     * Set the value related to the column: hours.
	 * @param hours the hours value you wish to set
	 */
	public void setHours(final Integer hours) {
		this.hours = hours;
	}

	/**
	 * Return the value associated with the column: endDate.
	 * @return A Date object (this.endDate)
	 */
	@Column( name = "end_date", nullable = false, length = 20    )
	public String getEndDate() {
		return this.endDate;

	}



	/**  
	 * Set the value related to the column: endDate.
	 * @param endDate the endDate value you wish to set
	 */
	public void setEndDate(final String endDate) {
		this.endDate = endDate;
	}

	/**
	 * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
	@Id 
	@Column( name = "id", nullable = false, length = 36  )
	public String getId() {
		return this.id;

	}



	/**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	/**
	 * Return the value associated with the column: itinerary.
	 * @return A Set&lt;Itinerary&gt; object (this.itinerary)
	 */
	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "plan"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Column( nullable = false  )
	public Set<Itinerary> getItineraries() {
		return this.itineraries;

	}

	/**
	 * Adds a bi-directional link of type Itinerary to the itineraries set.
	 * @param itinerary item to add
	 */
	public void addItinerary(Itinerary itinerary) {
		itinerary.setPlan(this);
		this.itineraries.add(itinerary);
	}


	/**  
	 * Set the value related to the column: itinerary.
	 * @param itinerary the itinerary value you wish to set
	 */
	public void setItineraries(final Set<Itinerary> itinerary) {
		this.itineraries = itinerary;
	}

	/**
	 * Return the value associated with the column: location.
	 * @return A String object (this.location)
	 */
	@Column( nullable = false, length = 50  )
	public String getLocation() {
		return this.location;

	}



	/**  
	 * Set the value related to the column: location.
	 * @param location the location value you wish to set
	 */
	public void setLocation(final String location) {
		this.location = location;
	}

	/**
	 * Return the value associated with the column: planMembers.
	 * @return A Set&lt;PlanMembers&gt; object (this.planMembers)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "plan"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Column( nullable = false  )
	public Set<PlanMembers> getPlanMemberss() {
		return this.planMemberss;

	}

	/**
	 * Adds a bi-directional link of type PlanMembers to the planMemberss set.
	 * @param planMembers item to add
	 */
	public void addPlanMembers(PlanMembers planMembers) {
		planMembers.setPlan(this);
		this.planMemberss.add(planMembers);
	}


	/**  
	 * Set the value related to the column: planMembers.
	 * @param planMembers the planMembers value you wish to set
	 */
	public void setPlanMemberss(final Set<PlanMembers> planMembers) {
		this.planMemberss = planMembers;
	}

	/**
	 * Return the value associated with the column: startDate.
	 * @return A Date object (this.startDate)
	 */
	@Column( name = "start_date", nullable = false, length = 20    )
	public String getStartDate() {
		return this.startDate;

	}



	/**  
	 * Set the value related to the column: startDate.
	 * @param startDate the startDate value you wish to set
	 */
	public void setStartDate(final String startDate) {
		this.startDate = startDate;
	}

	/**
	 * Return the value associated with the column: latitude.
	 * @return A Double object (this.latitude)
	 */
	public Double getLatitude() {
		return this.latitude;

	}



	/**  
	 * Set the value related to the column: latitude.
	 * @param latitude the latitude value you wish to set
	 */
	public void setLatitude(final Double latitude) {
		this.latitude = latitude;
	}
	
	  /**
     * Return the value associated with the column: longitude.
	 * @return A Double object (this.longitude)
	 */
	public Double getLongitude() {
		return this.longitude;
		
	}
	

  
    /**  
     * Set the value related to the column: longitude.
	 * @param longitude the longitude value you wish to set
	 */
	public void setLongitude(final Double longitude) {
		this.longitude = longitude;
	}

	/**
	 * Deep copy.
	 * @return cloned object
	 * @throws CloneNotSupportedException on error
	 */
	@Override
	public Plan clone() throws CloneNotSupportedException {

		final Plan copy = (Plan)super.clone();

	//	copy.setDayEnd(this.getDayEnd());
	//	copy.setDayStart(this.getDayStart());
		copy.setEndDate(this.getEndDate());
		copy.setId(this.getId());
		if (this.getItineraries() != null) {
			copy.getItineraries().addAll(this.getItineraries());
		}
		copy.setLocation(this.getLocation());
		if (this.getPlanMemberss() != null) {
			copy.getPlanMemberss().addAll(this.getPlanMemberss());
		}
		copy.setStartDate(this.getStartDate());
		return copy;
	}



	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		//sb.append("dayEnd: " + this.getDayEnd() + ", ");
	//	sb.append("dayStart: " + this.getDayStart() + ", ");
		sb.append("endDate: " + this.getEndDate() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("location: " + this.getLocation() + ", ");
		sb.append("startDate: " + this.getStartDate());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if ( this == aThat ) {
			return true;
		}


		if (aThat instanceof HibernateProxy) {
			// narrow down the proxy to the class we are dealing with.
			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
			}
		}
		if (aThat == null)  {
			return false;
		}

		final Plan that; 
		try {
			that = (Plan) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
			return false;
		} catch (ClassCastException e) {
			return false;
		}


		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		//result = result && (((getDayEnd() == null) && (that.getDayEnd() == null)) || (getDayEnd() != null && getDayEnd().equals(that.getDayEnd())));
		//result = result && (((getDayStart() == null) && (that.getDayStart() == null)) || (getDayStart() != null && getDayStart().equals(that.getDayStart())));
		result = result && (((getEndDate() == null) && (that.getEndDate() == null)) || (getEndDate() != null && getEndDate().equals(that.getEndDate())));
		result = result && (((getLocation() == null) && (that.getLocation() == null)) || (getLocation() != null && getLocation().equals(that.getLocation())));
		result = result && (((getStartDate() == null) && (that.getStartDate() == null)) || (getStartDate() != null && getStartDate().equals(that.getStartDate())));
		return result;
	}

	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}

					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
							newHashCode = String.valueOf(super.hashCode());

						}
					}

					this.hashCode = newHashCode;
				}
			}
		}
		return this.hashCode.hashCode();
	}



}
