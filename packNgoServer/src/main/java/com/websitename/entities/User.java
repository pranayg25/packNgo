package com.websitename.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.websitename.entities.iface.IUser;


/** 
 * Object mapping for hibernate-handled table: user.
 * @author autogenerated
 */

@Entity
@Table(name = "user", catalog = "websitename")
public class User implements Cloneable, Serializable, IUser {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558970235L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private String email;
	/** Field mapping. */
	private String firstName;
	/** Field mapping. */
	private Set<Friend> friends = new HashSet<Friend>();

	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private String lastName;
	/** Field mapping. */
	private String password;
	/** Field mapping. */
	private Set<PlanMembers> planMemberss = new HashSet<PlanMembers>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public User() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public User(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param email String object;
	 * @param firstName String object;
	 * @param id String object;
	 * @param lastName String object;
	 * @param password String object;
	 */
	public User(String email, String firstName, String id, 					
			String lastName, String password) {

		this.email = email;
		this.firstName = firstName;
		this.id = id;
		this.lastName = lastName;
		this.password = password;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return User.class;
	}
 

    /**
     * Return the value associated with the column: email.
	 * @return A String object (this.email)
	 */
	@Column( nullable = false, length = 45  )
	public String getEmail() {
		return this.email;
		
	}
	

  
    /**  
     * Set the value related to the column: email.
	 * @param email the email value you wish to set
	 */
	public void setEmail(final String email) {
		this.email = email;
	}

    /**
     * Return the value associated with the column: firstName.
	 * @return A String object (this.firstName)
	 */
	@Column( name = "first_name", nullable = false, length = 45  )
	public String getFirstName() {
		return this.firstName;
		
	}
	

  
    /**  
     * Set the value related to the column: firstName.
	 * @param firstName the firstName value you wish to set
	 */
	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}

    /**
     * Return the value associated with the column: friend.
	 * @return A Set&lt;Friend&gt; object (this.friend)
	 */
 	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Column( nullable = false  )
	public Set<Friend> getFriends() {
		return this.friends;
		
	}
	
	/**
	 * Adds a bi-directional link of type Friend to the friends set.
	 * @param friend item to add
	 */
	public void addFriend(Friend friend) {
		friend.setFriendUser(this);
		this.friends.add(friend);
	}

  
    /**  
     * Set the value related to the column: friend.
	 * @param friend the friend value you wish to set
	 */
	public void setFriends(final Set<Friend> friend) {
		this.friends = friend;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Column( name = "id", nullable = false, length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: lastName.
	 * @return A String object (this.lastName)
	 */
	@Column( name = "last_name", nullable = false, length = 45  )
	public String getLastName() {
		return this.lastName;
		
	}
	

  
    /**  
     * Set the value related to the column: lastName.
	 * @param lastName the lastName value you wish to set
	 */
	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}

    /**
     * Return the value associated with the column: password.
	 * @return A String object (this.password)
	 */
	@Column( nullable = false, length = 45  )
	public String getPassword() {
		return this.password;
		
	}
	

  
    /**  
     * Set the value related to the column: password.
	 * @param password the password value you wish to set
	 */
	public void setPassword(final String password) {
		this.password = password;
	}

    /**
     * Return the value associated with the column: planMembers.
	 * @return A Set&lt;PlanMembers&gt; object (this.planMembers)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Column( nullable = false  )
	public Set<PlanMembers> getPlanMemberss() {
		return this.planMemberss;
		
	}
	
	/**
	 * Adds a bi-directional link of type PlanMembers to the planMemberss set.
	 * @param planMembers item to add
	 */
	public void addPlanMembers(PlanMembers planMembers) {
		planMembers.setUser(this);
		this.planMemberss.add(planMembers);
	}

  
    /**  
     * Set the value related to the column: planMembers.
	 * @param planMembers the planMembers value you wish to set
	 */
	public void setPlanMemberss(final Set<PlanMembers> planMembers) {
		this.planMemberss = planMembers;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public User clone() throws CloneNotSupportedException {
		
        final User copy = (User)super.clone();

		copy.setEmail(this.getEmail());
		copy.setFirstName(this.getFirstName());
		if (this.getFriends() != null) {
			copy.getFriends().addAll(this.getFriends());
		}
		copy.setId(this.getId());
		copy.setLastName(this.getLastName());
		copy.setPassword(this.getPassword());
		if (this.getPlanMemberss() != null) {
			copy.getPlanMemberss().addAll(this.getPlanMemberss());
		}
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("email: " + this.getEmail() + ", ");
		sb.append("firstName: " + this.getFirstName() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastName: " + this.getLastName() + ", ");
		sb.append("password: " + this.getPassword() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final User that; 
		try {
			that = (User) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getEmail() == null) && (that.getEmail() == null)) || (getEmail() != null && getEmail().equals(that.getEmail())));
		result = result && (((getFirstName() == null) && (that.getFirstName() == null)) || (getFirstName() != null && getFirstName().equals(that.getFirstName())));
		result = result && (((getLastName() == null) && (that.getLastName() == null)) || (getLastName() != null && getLastName().equals(that.getLastName())));
		result = result && (((getPassword() == null) && (that.getPassword() == null)) || (getPassword() != null && getPassword().equals(that.getPassword())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
